/* Auto-generated by: https://github.com/pmndrs/gltfjsx */

import React, { useEffect, useRef } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { FacialExpressions } from './FacialExpressions'

// Morph target indices extracted from model configuration
const morphTargetIndices = {
  browDownLeft:      0,
  browDownRight:     1,
  browInnerUp:       2,
  browOuterUpLeft:   3,
  browOuterUpRight:  4,
  eyeSquintLeft:     5,
  eyeSquintRight:    6,
  eyeWideLeft:       7,
  eyeWideRight:      8,
  jawForward:        9,
  jawLeft:           10,
  jawRight:          11,
  mouthFrownLeft:    12,
  mouthFrownRight:   13,
  mouthPucker:       14,
  mouthShrugLower:   15,
  mouthShrugUpper:   16,
  noseSneerLeft:     17,
  noseSneerRight:    18,
  mouthLowerDownLeft:19,
  mouthLowerDownRight:20,
  mouthLeft:         21,
  mouthRight:        22,
  eyeLookDownLeft:   23,
  eyeLookDownRight:  24,
  eyeLookUpLeft:     25,
  eyeLookUpRight:    26,
  eyeLookInLeft:     27,
  eyeLookInRight:    28,
  eyeLookOutLeft:    29,
  eyeLookOutRight:   30,
  cheekPuff:         31,
  cheekSquintLeft:   32,
  cheekSquintRight:  33,
  jawOpen:           34,
  mouthClose:        35,
  mouthFunnel:       36,
  mouthDimpleLeft:   37,
  mouthDimpleRight:  38,
  mouthStretchLeft:  39,
  mouthStretchRight: 40,
  mouthRollLower:    41,
  mouthRollUpper:    42,
  mouthPressLeft:    43,
  mouthPressRight:   44,
  mouthUpperUpLeft:  45,
  mouthUpperUpRight: 46,
  mouthSmileLeft:    47,
  mouthSmileRight:   48,
  tongueOut:         49,
  eyeBlinkLeft:      50,
  eyeBlinkRight:     51
}

// // Facial expressions per animation
// const facialExpressions = {
//   idle: {},
//   angry: {
//     browDownLeft: 1, browDownRight: 1, eyeSquintLeft: 1, eyeSquintRight: 1,
//     jawForward: 1, jawLeft: 1, mouthShrugLower: 1, noseSneerLeft: 1,
//     noseSneerRight: 0.42, cheekSquintLeft: 1, cheekSquintRight: 1,
//     mouthClose: 0.23, mouthFunnel: 0.63, mouthDimpleRight: 1
//   },
//   'angry-gesture': {
//     browDownLeft: 1, browDownRight: 1, eyeSquintLeft: 0.9, eyeSquintRight: 0.9,
//     jawForward: 1, mouthShrugLower: 0.9, noseSneerLeft: 0.9, noseSneerRight: 0.4,
//     cheekSquintLeft: 1, cheekSquintRight: 1, mouthFunnel: 0.5,
//     mouthDimpleLeft: 0.5, mouthDimpleRight: 1
//   },
//   crying: {
//     mouthFrownLeft: 1, mouthFrownRight: 1, mouthShrugLower: 1,
//     browInnerUp: 0.8, eyeSquintLeft: 1, eyeSquintRight: 1,
//     eyeLookDownLeft: 0.8, eyeLookDownRight: 0.8, jawForward: 0.8
//   },
//   happy: {
//     browInnerUp: 0.2, eyeSquintLeft: 0.4, eyeSquintRight: 0.44,
//     noseSneerLeft: 0.17, noseSneerRight: 0.14,
//     mouthPressLeft: 0.61, mouthPressRight: 0.41
//   },
//   punching: {
//     jawLeft: 0.7, browDownLeft: 1, browDownRight: 1,
//     eyeSquintLeft: 1, eyeSquintRight: 1, jawForward: 1,
//     noseSneerLeft: 0.7, noseSneerRight: 0.6,
//     mouthFunnel: 0.5, mouthDimpleRight: 0.5
//   },
//   rejected: {
//     browInnerUp: 0.5, eyeSquintLeft: 0.6, eyeSquintRight: 0.6,
//     mouthFrownLeft: 0.9, mouthFrownRight: 0.9, mouthShrugLower: 0.7,
//     eyeLookDownLeft: 0.4, eyeLookDownRight: 0.4, jawForward: 0.8
//   },
//   sad: {
//     mouthFrownLeft: 1, mouthFrownRight: 1, mouthShrugLower: 0.78,
//     browInnerUp: 0.45, eyeSquintLeft: 0.72, eyeSquintRight: 0.75,
//     eyeLookDownLeft: 0.5, eyeLookDownRight: 0.5, jawForward: 1
//   },
//   stomping: {
//     browDownLeft: 1, browDownRight: 1, jawForward: 1,
//     mouthShrugLower: 1, eyeSquintLeft: 0.9, eyeSquintRight: 0.9,
//     noseSneerLeft: 0.8, noseSneerRight: 0.4,
//     cheekSquintLeft: 1, cheekSquintRight: 1, mouthClose: 0.3
//   },
//   thankful: {
//     browInnerUp: 0.4, eyeSquintLeft: 0.3, eyeSquintRight: 0.3,
//     noseSneerLeft: 0.1, noseSneerRight: 0.1,
//     mouthSmileLeft: 0.4, mouthSmileRight: 0.4,
//     cheekSquintLeft: 0.3, cheekSquintRight: 0.3
//   }
// }

// Apply expression helper
function applyFacialExpression(skinnedMesh, expression) {
  const influences = skinnedMesh.morphTargetInfluences;
  const dictionary = skinnedMesh.morphTargetDictionary;

  Object.values(dictionary).forEach((value) => {
    influences[value] = 0;
  });
  Object.entries(expression).forEach(([key, value]) => {
    const idx = dictionary[key]
    if (idx !== undefined && influences[idx] !== undefined) {
      influences[idx] = value
    }
  })
}
export function WomanRelaxAvatar({ animation = 'angry-gesture', ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/women-relax.glb')
  const { animations } = useGLTF('/woman-animation.glb')
  const { actions } = useAnimations(animations, group)

  // Play and switch animation with corresponding facial expression
  useEffect(() => {
    // stop all
    Object.values(actions).forEach(a => a.stop())
    const action = actions[animation]
    if (action) {
      action.reset().fadeIn(0.4).play();
      const expr = FacialExpressions[animation] || {}
      applyFacialExpression(nodes.Wolf3D_Head, expr)
      applyFacialExpression(nodes.EyeLeft, expr)
      applyFacialExpression(nodes.EyeRight, expr)
    }
  }, [actions, animation, nodes])

  return (
    <group {...props} dispose={null} ref={group} position-y={-1}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      {/* Remaining body meshes */}
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
    </group>
  )
}

useGLTF.preload('/women-relax.glb')
useGLTF.preload('/woman-animation.glb')
